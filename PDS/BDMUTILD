/********************** BDMUTIL  REXX/CLIST      *********************/
/*  BDMUTIL                                                          */
/*                                                                   */
/*     This exec provides an ISPF interface to the following pgms:   */
/*     BDMUSERS, BDMLIST and BDMDEL from the BRODMSTR load library.  */
/*     The exec makes certain assumption about the output from these */
/*     commands, therefore, may need to be revised when these cmds   */
/*     change.                                                       */
/*                                                                   */
/*  SYNTAX: BDMUTIL DSN                                              */
/*     DSN - Optional - used for testing against a copy of the       */
/*         system BRODCAST data set.  Use the same syntax for any    */
/*         TSO dataset, i.e. either use quotes or Data set will be   */
/*         prefixed with your Userid Profile Prefix.  If not         */
/*         provided, then use the default from BC_DSN variable.      */
/*                                                                   */
/*  Date-written:  12/28/2000 - Vinh Vu                              */
/*                                                                   */
/*  Customization:                                                   */
/*     Change default setting in the "CUSTOMIZATION BLOCK" to        */
/*     to reflect Panel names (if you decide to change them) and     */
/*     BDMxx command names, BRODCAST data set name.                  */
/*                                                                   */
/*********************************************************************/
/*                                                                   */
/*  Change History:                                                  */
/*                                                                   */
/*     01/03/2001 - V_Vu - Change to move 'NUMERIC DIGITS 256' to    */
/*         the body of main exec so that all 'C2D' calls will work   */
/*         (thanks to Sam Golob and Bob Lamerand of StorageTek).     */
/*                                                                   */
/*     01/05/2001 - V_Vu - Change to add PRINT function.             */
/*                                                                   */
/*     01/08/2001 - V_Vu - Change to make PRINT function work better.*/
/*         Also, add change to display the BRODCAST dsn plus data    */
/*         set info...                                               */
/*                                                                   */
/*     01/09/2001 - V_Vu - Change to fix the row positioning after   */
/*         a row is selected.                                        */
/*                                                                   */
/*     06/28/2001 - V_Vu - Change to allow for SKIP(nn) and MSGS(nn) */
/*         in BCMLIST and BCMDEL2.  Also add CPU information display */
/*         on the Primary Panel as well.                             */
/*                                                                   */
/*     04/19/2007 - SBG -  Adapt to BRODMSTR package.                */
/*                                                                   */
/*********************************************************************/

/********************* CUSTOMIZATION BLOCK ***************************/

TABLENM    = 'BDMTABL'         /* Main table name                    */
TABLEMSG   = 'BDMMSGS'         /* Table used to display msgs         */
TABPANEL   = 'BDMPNL1'         /* Panel name for main display        */
MSGPANEL   = 'BDMPNL2'         /* Panel used to display msgs         */
ALERTPANEL = 'BDMPNL3'         /* Panel used to alert for DEL action */
PRINTPANEL = 'BDMPNL4'         /* Panel used to print messages       */
PROGRBAR   = 'PROGRBAR'        /* Program Bar Panel                  */

OCLASS     = 'A'               /* Default SYSOUT for printing        */
ODEST      = '  '              /* Default DEST for printing          */
OWRITER    = ' '               /* Default WRITER for printing        */
MAX_LINES  = 50                /* Line/Count per page for printing   */
EXTRA_LINES_AT_THE_END = 2
LAST_LINE              = 1

LST_USER_CMD = 'BDMUSERS'      /* TSO cmd to list userid w/msgs      */
LST_USER_MSG = 'BDMLRBA'       /* TSO cmd to list a specicic id msgs */
DEL_USER_MSG = 'BDMDEL'        /* TSO cmd to delete msgs             */

BC_DSN = "'SYS1.BRODCAST'"     /* Default DSN for the BROADCAST data */
                               /* set. Overriden by PARM.            */

/***************************** END ***********************************/

If Sysvar(SYSISPF) ¬='ACTIVE' Then Do
   Parse Source . . EXEC_NAME .
   Say '***' EXEC_NAME 'can only run under ISPF...'
   Exit
   End

Address ISPEXEC

NUMERIC DIGITS 256

MSG_X_AXIS  = 20                               /* 20 units on X-axis */
                                               /* for the progr bar  */

COLOR.         = '¬'           /* Default color = White              */
COLOR.RED      = '{'           /* These colors should match with     */
COLOR.BLUE     = '~'           /* what's being defined in the progr  */
COLOR.YELLOW   = '_'           /* bar panel.                         */
COLOR.TURQ     = '`'           /*                                    */
COLOR.WHITE    = '¬'           /*                                    */
COLOR.PINK     = '!'           /*                                    */
COLOR.GREEN    = '#'           /*                                    */

TEXT_COLOR     = '}'           /*                                    */

ZTDMARK = Center(' End Of List ',80,'-')

Call DISPLAY_IN_PROGRESS_BAR 5 RED

DELETED_TOTAL = 0
DELETED_MSG   = 'Msgs have been deleted for id(s):'

SORT_BY_ID    = 'TBSORT '||TABLENM||' FIELDS(UID,C,A)'
SORT_BY_TOTAL = 'TBSORT '||TABLENM||' FIELDS(UTOTAL,N,A,UID,C,A)'

SORT_STMT = SORT_BY_ID
ACTCMD = ''

MSG_FOR_DELETE  = 'Following Broadcast Messages Have Been Deleted:'
MSG_FOR_DISPLAY = 'Outstanding Broadcast Messages:'

Arg DSN .
If DSN = '' Then DSN = BC_DSN

Say Current BRODCAST dataset is DSN

X = Listdsi(DSN 'DIRECTORY NORECALL')

Address TSO 'ALLOC F(BRODCAST) DA('||DSN||') SHR REU'
If RC > 0 Then Do
   Say '** Error Allocating '||DSN||'. Abort...'
   Exit
   End

$DSNAME  =  SYSDSNAME
$VOLUME  =  SYSVOLUME
$DSORG   =  SYSDSORG
$RECFM   =  SYSRECFM
$LRECL   =  SYSLRECL
$KEYL    =  SYSKEYLEN
$BLKSIZE =  SYSBLKSIZE
$UNIT    =  SYSUNIT
$CRDATE  =  SYSCREATE

MYCRP = 0

CVT     = Get_Stor('10'x)
ASVT    = Get_Stor(CVT,'22C'x)
MAXUSER = C2D(Get_Stor(ASVT,'204'x))

SMCA    = Get_Stor(CVT,'C4'x)
SMFID   = Get_Stor(SMCA,'10'x)

CSD     = Get_Stor(CVT,'294'x)
RCE     = Get_Stor(CVT,'490'x)
RMCT    = Get_Stor(CVT,'25C'x)
MACH    = C2X(Get_Stor(CVT,-6,2))
NUM_CPU = C2D(Get_Stor(CSD,'A'x,2))
CP      = NUM_CPU
SU      = C2D(Get_Stor(RMCT,64))
SUSEC   = Strip(Format((16000000/SU),8,2))
RSTORE  = (C2D(Get_Stor(CVT,'358'x))/1024)||'M'
ESTORE  = (C2D(Get_Stor(RCE,'A0'x))*4)/1024||'M'

PROCESS_ALL_IDS:

Call DISPLAY_IN_PROGRESS_BAR 10 YELLOW

'TBCREATE' TABLENM 'NAMES(UID UTOTAL USTAT) REPLACE NOWRITE'

Address TSO
'NEWSTACK'
X = OUTTRAP('CMD.')
LST_USER_CMD 'X'
TEMPRC = RC
'DELSTACK'
Address ISPEXEC

If TEMPRC ¬= 0 Then Do
   Do I=1 To CMD.0
      Say 'Err' I ':' CMD.I
      End
   'TBCLOSE' TABLENM
   Exit
   End
Else Do
   Call DISPLAY_IN_PROGRESS_BAR 80 TURQ
   Call SCAN_ASVT
   Call DISPLAY_IN_PROGRESS_BAR 90 GREEN
   Do I=1 To CMD.0
      Parse Var CMD.I FIELD_01 FIELD_02 . FIELD_04 .
      If FIELD_01 = 'User'
      Then Do
         UID = FIELD_02
         UTOTAL = FIELD_04
         CKID = Strip(UID)
         If JOBNAME.CKID Then Do
            USTAT = Strip(CKID)||'('||,
                    Strip(JOBID.CKID)||') A('||,
                    Strip(JOBASID.CKID)||') Active'
            End
         Else USTAT = ''
         'TBADD' TABLENM
         End             /* If FIELD_01     */
      End                /* Do I=1          */
   End

'TBTOP' TABLENM

SORT_TABLE:

SORT_STMT

DISPL_TABLE_AFTER_SORT:

MYCMD = ''
MYSEL = ''
'TBDISPL' TABLENM  'PANEL('TABPANEL') POSITION(MYCRP)'
TEMPRC = RC
If TEMPRC = 8 Then Signal IAMDONE
Else If Temprc = 0 | Temprc = 4 Then Nop
Else Do
   ZEDSMSG = 'Err TBDISPL Rc:' TEMPRC
   ZEDLMSG = 'Error occurs during TBDISPL - Check ISPF environment'
   'SETMSG MSG(ISRZ001)'
   'TBCLOSE' TABLENM
   Exit
   End

Parse Var MYCMD CMD1 .
LIMITED_STRING = ' '
Select
   When CMD1  = '' Then Do
      Select
         When MYSEL = 'S' Then Do
            LIMITED_STRING = CHECK_PARM()
            Signal DISPLAY_A_SPECIFIC_ID
            End
         When MYSEL = 'P' Then Do
            LIMITED_STRING = CHECK_PARM()
            Signal PRINT_MESSAGES
            End
         When MYSEL = 'D' Then Do
            LIMITED_STRING = CHECK_PARM()
            Signal DELETE_MESSAGES
            End
         Otherwise Nop
         End                /*  Select */
      End
   When CMD1  = 'SORTID' Then Do
      SORT_STMT = SORT_BY_ID
      Signal SORT_TABLE
      End
   When CMD1  = 'SORTTOT' Then Do
      SORT_STMT = SORT_BY_TOTAL
      Signal SORT_TABLE
      End
   Otherwise Nop
End    /* Select  */

Signal PROCESS_ALL_IDS


CHECK_PARM:
NUMBER_OF_EXTRA_LINES = 0
SKIP_STRING    = ' '
MSGS_STRING    = ' '
If SKAMT ¬= '' Then Do
   NUMBER_OF_EXTRA_LINES = NUMBER_OF_EXTRA_LINES + 1
   SKIP_STRING = ' SKIP('||Strip(SKAMT)||')'
   End
If MSAMT ¬= '' Then Do
   NUMBER_OF_EXTRA_LINES = NUMBER_OF_EXTRA_LINES + 1
   MSGS_STRING = ' MSGS('||Strip(MSAMT)||')'
   End
Return SKIP_STRING||MSGS_STRING


DISPLAY_A_SPECIFIC_ID:
'TBCREATE' TABLEMSG 'NAMES(UMSG1 UMSG2) REPLACE NOWRITE'

Address TSO
'NEWSTACK'
X = OUTTRAP('CMD.')
LST_USER_MSG UID LIMITED_STRING
TEMPRC = RC
'DELSTACK'
Address ISPEXEC

If TEMPRC ¬= 0 Then Do
   Do I=1 To CMD.0
      Say 'Err' I ':' CMD.I
      End
   'TBCLOSE' TABLEMSG
   Exit
   End
Else Do
   If Substr(CMD.6,1,23) = '           This BRODCAST' Then
   Do I=8 To (CMD.0-EXTRA_LINES_AT_THE_END)
      UMSG1 = Substr(CMD.I,1,72)
      UMSG2 = Substr(CMD.I,73,72)
      'TBADD' TABLEMSG
      End
   Else
   Do I=7 To (CMD.0-EXTRA_LINES_AT_THE_END)
      UMSG1 = Substr(CMD.I,1,72)
      UMSG2 = Substr(CMD.I,73,72)
      'TBADD' TABLEMSG
      End              /* Do I=1   */
   ACTION = MSG_FOR_DISPLAY
   ACTCMD = '(DEL/PRT)'
   MYCMD = ''
   'ADDPOP COLUMN(13)'
   'TBTOP'   TABLEMSG
   'TBDISPL' TABLEMSG 'PANEL('MSGPANEL')'
   TEMPRC = RC
   'TBCLOSE' TABLEMSG
   'REMPOP'
   If TEMPRC = 0 Then Do
      If Strip(MYCMD) = 'DEL' Then Signal DELETE_MESSAGES
      If Strip(MYCMD) = 'PRT' Then Signal PRINT_MESSAGES
      End
   End
Signal DISPL_TABLE_AFTER_SORT



DELETE_MESSAGES:
'ADDPOP COLUMN(14) ROW(5)'
'DISPLAY PANEL('ALERTPANEL')'
TEMPRC = RC
'REMPOP'
If TEMPRC > 0 Then Signal DISPL_TABLE_AFTER_SORT

'TBCREATE' TABLEMSG 'NAMES(UMSG1 UMSG2) REPLACE NOWRITE'

Address TSO
'NEWSTACK'
X = OUTTRAP('CMD.')
DEL_USER_MSG UID LIMITED_STRING
TEMPRC = RC
'DELSTACK'
Address ISPEXEC

If TEMPRC ¬= 0 Then Do
   Do I=1 To CMD.0
      Say 'Err' I ':' CMD.I
      End
   'TBCLOSE' TABLEMSG
   Exit
   End
Else Do
   If Substr(CMD.6,1,23) = '           This BRODCAST' Then
   Do I=8 To (CMD.0-LAST_LINE)
      UMSG1 = Substr(CMD.I,1,72)
      UMSG2 = Substr(CMD.I,73,72)
      'TBADD' TABLEMSG
      End
   Else
   Do I=7 To (CMD.0-LAST_LINE)
      UMSG1 = Substr(CMD.I,1,72)
      UMSG2 = Substr(CMD.I,73,72)
      'TBADD' TABLEMSG
      End
   ACTION = MSG_FOR_DELETE
   ACTCMD = ''
   TMP_UID = Strip(UID)
   ZEDSMSG = 'Msgs sucessfully deleted'
   ZEDLMSG = 'Outstanding Msgs for '||TMP_UID||' have been deleted...'
   'SETMSG MSG(ISRZ001)'
   'ADDPOP COLUMN(13)'
   'TBTOP'   TABLEMSG
   'TBDISPL' TABLEMSG 'PANEL('MSGPANEL')'
   'REMPOP'
   'TBCLOSE' TABLEMSG
   If DELETED_TOTAL = 0 Then DELETED_MSG = DELETED_MSG||' '||TMP_UID
   Else Do
      If Index(DELETED_MSG,TMP_UID) = 0 Then Do
         DELETED_MSG = DELETED_MSG||', '||TMP_UID
         End                 /*  If Index   */
      End
   DELETED_TOTAL = DELETED_TOTAL +,
      (CMD.0-EXTRA_LINES_AT_THE_END-NUMBER_OF_EXTRA_LINES)
   End
Signal PROCESS_ALL_IDS


PRINT_MESSAGES:
'ADDPOP COLUMN(14) ROW(5)'
'DISPLAY PANEL('PRINTPANEL')'
TEMPRC = RC
'REMPOP'
If TEMPRC > 0 Then Signal DISPL_TABLE_AFTER_SORT

'TBCREATE' TABLEMSG 'NAMES(UMSG1 UMSG2) REPLACE NOWRITE'

Address TSO
'NEWSTACK'
X = OUTTRAP('CMD.')
LST_USER_MSG UID LIMITED_STRING
TEMPRC = RC
'DELSTACK'
Address ISPEXEC

If TEMPRC ¬= 0 Then Do
   Do I=1 To CMD.0
      Say 'Err' I ':' CMD.I
      End
   'TBCLOSE' TABLEMSG
   Exit
   End
Else Call PRINT_ALL_LINES

Signal DISPL_TABLE_AFTER_SORT


PRINT_ALL_LINES:

Address TSO
FILENAME = '$$'||Random(1000,9999)||'$$'
'NEWSTACK'
X = OUTTRAP('JUNK.')
'FREE F('FILENAME')'
'DELSTACK'

If ODEST   ¬= '' Then DEST_STRING    = 'DEST('||Strip(ODEST)||')'
Else DEST_STRING = ''
If OWRITER ¬= '' Then WRITER_STRING  = 'WRITER('||Strip(OWRITER)||')'
Else WRITER_STRING = ''
'ALLOC FILE('||FILENAME||') '||,
      'SYSOUT('OCLASS') LRECL(131) '||,
      'RECFM(F B A) SPIN(UNALLOC) '||DEST_STRING||' '||WRITER_STRING
TEMPRC = RC
Address ISPEXEC
If TEMPRC > 0 Then Do
   ZEDSMSG = 'Error allocating SYSOUT'
   ZEDLMSG = 'Cannot allocate SYSOUT data set for print. RC:' TEMPRC
   'SETMSG MSG(ISRZ001)'
   End
Else Call PRINT_ROUTINE

Return



PRINT_ROUTINE:

PAGE_COUNT = 0
COUNTER = 0
LINE_COUNT = 99
HEAD1 =
HEAD1 = '1'||'  SMF id: '||SMFID||,
        Center('* Broadcast Msgs For '||Strip(UID)||' *',80)||,
        'Page: '
HEAD2 = '   Printed on '||Date(W)||', '||Date(U)||' - '||Time()
HEAD3 = '   Broadcast Data Set Name: '||$DSNAME
HEAD4 = '                 On Volume: '||$VOLUME

Address TSO
'NEWSTACK'
Do I=1 to CMD.0
   If LINE_COUNT > MAX_LINES  Then Do
      PAGE_COUNT = PAGE_COUNT + 1
      Queue HEAD1||Format(PAGE_COUNT,2)
      Queue
      Queue HEAD2
      Queue HEAD3
      Queue HEAD4
      Queue
      COUNTER = COUNTER + 6
      LINE_COUNT = 1
      End                        /* If LINE_COUNT  */
   Queue '   => ' CMD.I
   COUNTER = COUNTER + 1
   LINE_COUNT = LINE_COUNT + 1
   End

'EXECIO' COUNTER  'DISKW' FILENAME '(FINIS'
'DELSTACK'
'FREE F('FILENAME')'
Address ISPEXEC
ZEDSMSG = 'Msgs sucessfully printed'
ZEDLMSG = 'Outstanding msgs for '||Strip(UID)||' printed.'
'SETMSG MSG(ISRZ000)'
Return

IAMDONE:
'TBCLOSE' TABLENM
Address TSO 'FREE F(BRODCAST)'
If DELETED_TOTAL > 0 Then Do
   ZEDSMSG = ''
   ZEDLMSG = Strip(Left(DELETED_MSG,500))
   'SETMSG MSG(ISRZ000)'
   End

Exit


DISPLAY_IN_PROGRESS_BAR:

Arg P_PCT P_COLOR .

TMP1     = (P_PCT*MSG_X_AXIS)%100
TMP2     = MSG_X_AXIS-TMP1
PGRBAR   = Copies(' ',TMP1)||Copies('.',TMP2)
PGRMASK  = Copies(COLOR.P_COLOR,TMP1)||Copies(TEXT_COLOR,TMP2)
'CONTROL DISPLAY LOCK'
'ADDPOP COLUMN(62) ROW(-1)'
'DISPLAY PANEL('PROGRBAR')'
'REMPOP'
Return



SCAN_ASVT:

NUMTSU  = 0
OFFSET  = 0+C2D('20C'x)

JOBNAME.  = 0
JOBID.    = ''
JOBASID.  = ''

Do MAXUSER
   ASCB   = Get_Stor(ASVT,OFFSET)
   OFFSET = OFFSET+4
   If Bitand(Substr(ASCB,1,1),'80'X) = '80'X Then Iterate
   If C2D(ASCB) = 0 Then Iterate
   If Get_Stor(ASCB,0,4) ¬= 'ASCB' Then Iterate
   If C2D(Get_Stor(ASCB,'3C'x)) = 0 Then Iterate      /* TSU only */

   JOBNI = Get_Stor(ASCB,172)
   JOBNS = Get_Stor(ASCB,176)

   If C2D(JOBNS) = 0 and C2D(JOBNI) = 0 Then Do
      JOBN = 'INIT'                     /* 'Starting' */
      End

   If C2D(JOBNI) = 0 Then Do
      If C2D(JOBNS) ¬=0 Then JOBN  = Get_Stor(JOBNS,,8)
         Else JOBN = 'INIT'             /* '**Init**' */
      If C2D(Get_Stor(ASCB,'3C'x)) = 0 Then JTYPE = 'STC'
         Else JTYPE = 'TSU'
      End
   Else Do
      JOBN  = Get_Stor(JOBNI,,8)
      JTYPE = 'BAT'
      End
   OUCB        = Get_Stor(ASCB,'90'x)
   ASSB        = Get_Stor(ASCB,'150'x)
   JSAB        = Get_Stor(ASSB,'A8'x)
   JOBN        = Strip(JOBN)
   JOBNAME.JOBN  = 1
   JOBASID.JOBN  = C2X(Get_Stor(ASCB,'24'x,2))
   If C2D(JSAB) ¬= 0 Then JOBID.JOBN = Get_Stor(JSAB,'14'x,8)
   Else                   JOBID.JOBN = ''
   NUMTSU = NUMTSU + 1
   /* Say JOBN '-->' JOBNAME.JOBN JOBID.JOBN JOBASID.JOBN */
   End   /* Do MAXUSER */

Return

Get_Stor: PROCEDURE

/*------------------------------------------------------------------*/
/*                                                                  */
/*      This procedure will extract data using the MVS Storage      */
/*      function. Input arguments will be:                          */
/*                                                                  */
/*      1) Storage_Pointer or Literal, i.e. CVTPTR or '10'x, or     */
/*         16 (like '10'x)                                          */
/*      2) Offset in hex or dec (numnbe), i.e. 'FF'x or 256 or      */
/*         D2C(256)                                                 */
/*      3) Length of returned data in decimal, i.e. 256             */
/*                                                                  */
/*      NOTE - To make sure that this procedure will work all the   */
/*      times, just include 'NUMERIC DIGITS 256' at the beginning   */
/*      of the calling REXX exec.                                   */
/*                                                                  */
/*------------------------------------------------------------------*/


Parse Arg AREA,OFFSET,LENG

If Arg(2,'O') Then OFFSET=0

If Arg(3,'O') Then LENG=4

If DataType(AREA) = 'CHAR' Then Do
   AREA =  C2D(AREA)
   End

If DataType(OFFSET) = 'CHAR' Then Do
   OFFSET =  C2D(OFFSET)
   End

Return  Storage((D2X(AREA+OFFSET)),LENG)

